// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package service_mocks is a generated GoMock package.
package service_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	service "github.com/spanwalla/docker-monitoring-backend/internal/service"
)

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// CreatePinger mocks base method.
func (m *MockPinger) CreatePinger(ctx context.Context, input service.PingerCreateInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePinger", ctx, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePinger indicates an expected call of CreatePinger.
func (mr *MockPingerMockRecorder) CreatePinger(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePinger", reflect.TypeOf((*MockPinger)(nil).CreatePinger), ctx, input)
}

// GenerateToken mocks base method.
func (m *MockPinger) GenerateToken(ctx context.Context, input service.PingerGenerateTokenInput) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockPingerMockRecorder) GenerateToken(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockPinger)(nil).GenerateToken), ctx, input)
}

// ParseToken mocks base method.
func (m *MockPinger) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockPingerMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockPinger)(nil).ParseToken), token)
}

// MockReport is a mock of Report interface.
type MockReport struct {
	ctrl     *gomock.Controller
	recorder *MockReportMockRecorder
}

// MockReportMockRecorder is the mock recorder for MockReport.
type MockReportMockRecorder struct {
	mock *MockReport
}

// NewMockReport creates a new mock instance.
func NewMockReport(ctrl *gomock.Controller) *MockReport {
	mock := &MockReport{ctrl: ctrl}
	mock.recorder = &MockReportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReport) EXPECT() *MockReportMockRecorder {
	return m.recorder
}

// GetActualReports mocks base method.
func (m *MockReport) GetActualReports(ctx context.Context) ([]service.ReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualReports", ctx)
	ret0, _ := ret[0].([]service.ReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualReports indicates an expected call of GetActualReports.
func (mr *MockReportMockRecorder) GetActualReports(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualReports", reflect.TypeOf((*MockReport)(nil).GetActualReports), ctx)
}

// PublishToQueue mocks base method.
func (m *MockReport) PublishToQueue(ctx context.Context, input service.ReportStoreInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishToQueue", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishToQueue indicates an expected call of PublishToQueue.
func (mr *MockReportMockRecorder) PublishToQueue(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishToQueue", reflect.TypeOf((*MockReport)(nil).PublishToQueue), ctx, input)
}

// Store mocks base method.
func (m *MockReport) Store(ctx context.Context, deliveryBody []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, deliveryBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockReportMockRecorder) Store(ctx, deliveryBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockReport)(nil).Store), ctx, deliveryBody)
}
